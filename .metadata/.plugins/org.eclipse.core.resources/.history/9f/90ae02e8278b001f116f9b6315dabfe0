package com.example.shipping.service;

import java.util.ArrayList;

import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

import com.example.crm.event.CustomerAddressPhonesChangedEvent;
import com.example.crm.event.CustomerAddressesChangedEvent;
import com.example.crm.event.CustomerCreatedEvent;
import com.example.crm.event.CustomerEvent;
import com.example.crm.event.CustomerRemovedEvent;
import com.example.shipping.repository.CustomerDocumentRepository;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class CustomerReplicationService {
	private final ObjectMapper objectMapper;
	private final CustomerDocumentRepository customerDocumentRepository;

	public CustomerReplicationService(ObjectMapper objectMapper,
			CustomerDocumentRepository customerDocumentRepository) {
		this.objectMapper = objectMapper;
		this.customerDocumentRepository = customerDocumentRepository;
	}

	@KafkaListener(topics = { "${customerEventTopicName}" }, groupId = "shipping-service")
	public void listenCustomerEvents(String eventAsJson) {
		System.out.println("new replication customer event has just arrived: %s".formatted(eventAsJson));
		try {
			var event = objectMapper.readValue(eventAsJson, CustomerEvent.class);
			switch (event) {
			case CustomerCreatedEvent cce -> {
				System.out.println("new replication customer event has just arrived: %s".formatted(cce));
				customerDocumentRepository.save(cce.getCustomer());
			}
			case CustomerRemovedEvent cre -> {
				System.out.println("new replication customer event has just arrived: %s".formatted(cre));
				customerDocumentRepository.deleteById(cre.getIdentity());
			}
			case CustomerAddressesChangedEvent cace -> {
				System.out.println("new replication customer event has just arrived: %s".formatted(cace));
				var addresses = (ArrayList<?>) cace.getEventData();
				System.out.println(addresses.get(0).getClass());
				customerDocumentRepository.findById(cace.getIdentity())
				                          .ifPresent(cust -> {
				                        	 System.out.println(cace.getClass());
				                           });
			}
			case CustomerAddressPhonesChangedEvent cpce -> {
				System.out.println("new replication customer event has just arrived: %s".formatted(cpce));
			}
			default -> {
				throw new IllegalArgumentException("Unexpected value: " + event);
			}
			}
		} catch (JsonProcessingException e) {
			System.out.println("Exception while deserializing the json: %s".formatted(e.getMessage()));
		}
	}
}
