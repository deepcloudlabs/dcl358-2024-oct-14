package com.example.ordering.service;

import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.example.ordering.dto.request.SubmitOrderRequest;
import com.example.ordering.dto.response.SubmitOrderResponse;
import com.example.ordering.event.OrderCreatedEvent;

@Service
public class OrderHandlerService {
	private final OrderService orderService;
	private final EventPublisherService eventPublisher;
	
	public OrderHandlerService(OrderService orderService, EventPublisherService eventPublisher) {
		this.orderService = orderService;
		this.eventPublisher = eventPublisher;
	}

	@Transactional(propagation = Propagation.REQUIRES_NEW)
	public SubmitOrderResponse handleRequest(SubmitOrderRequest request) {
		var order = orderService.saveorder(request.getOrder());
		var customerId = order.getCustomerId();
		var orderId = order.getOrderId();
		var event = new OrderCreatedEvent(orderId,customerId);
		eventPublisher.publishEvent(event);
		return new SubmitOrderResponse(orderId,"success");
	}

}
